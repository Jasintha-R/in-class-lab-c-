#include <bits/stdc++.h>
using namespace std;

// Function to find precedence of operators.
int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    if (op == '%' || op == '@')
        return 3;
    return 0;
}

// Function to perform arithmetic operations.
int applyOp(int a, int b, char op) {
    switch (op) {
        case '+':
            return a + b;
        case '-':
            if (a < b) {
                return b - a;
            } else {
                return a - b;
            }
        case '*':
            return a * b;
        case '/':
            return a / b;
        case '%':
            return min(a, b);
        case '@':
            return max(a, b);
    }
    return 0;
}

// Function that returns value of expression after evaluation.
string evaluate(string tokens) {
    int i;
    int prevToken = '#';

    // stack to store integer values.
    stack<int> values;

    // stack to store operators.
    stack<char> ops;

    for (i = 0; i < tokens.length(); i++) {
        // Current token is a whitespace, skip it.
        if (tokens[i] == ' ')
        {
            continue;
        }


        // Current token is an opening brace, push it to 'ops'
        if (tokens[i] == '(') {
            
            ops.push(tokens[i]);
        }

        // Current token is a number, push it to stack for numbers.
        else if (isdigit(tokens[i])) {
            int val = 0;

            // There may be more than one digits in number.
            while (i < tokens.length() && isdigit(tokens[i])) {
                val = (val * 10) + (tokens[i] - '0');
                i++;
            }

            values.push(val);

            // right now the i points to the character next to the digit,
            // since the for loop also increases the i, we would skip one
            // token position; we need to decrease the value of i by 1 to
            // correct the offset.
            i--;
        }

        // Closing brace encountered, solve entire brace.
        else if (tokens[i] == ')') {
            while (!ops.empty() && ops.top() != '(') {
                int val2 = values.top();
                values.pop();

                int val1 = values.top();
                values.pop();

                char op = ops.top();
                ops.pop();

                values.push(applyOp(val1, val2, op));
            }

            // pop opening brace.
            if (!ops.empty())
                ops.pop();
        }

        // Current token is an operator.
        else {
            // While top of 'ops' has same or greater precedence to current
            // token, which is an operator. Apply operator on top of 'ops'
            // to top two elements in values stack
            while (!ops.empty() && precedence(ops.top()) >= precedence(tokens[i])) {
                int val2 = values.top();
                values.pop();

                int val1 = values.top();
                values.pop();

                char op = ops.top();
                ops.pop();

                values.push(applyOp(val1, val2, op));
            }

            // Push current token to 'ops'.
            ops.push(tokens[i]);
        }

        prevToken = tokens[i]; // Update prevToken with the current token
    }

    // Entire expression has been parsed at this point, apply remaining ops to remaining values.
    while (!ops.empty()) {
        int val2 = values.top();
        values.pop();

        int val1 = values.top();
        values.pop();

        char op = ops.top();
        ops.pop();

        values.push(applyOp(val1, val2, op));
    }

    // Top of 'values' contains result, return it as a string.
    return to_string(values.top());
}

// Function to check if an expression has valid parentheses.
bool isValidExpression(const string& expression) {
    stack<char> parentheses;

    for (char ch : expression) {
        if (ch == '(') {
            parentheses.push(ch);
        } else if (ch == ')') {
            if (parentheses.empty()) {
                return false;  // Closing parenthesis without a corresponding opening parenthesis.
            }
            parentheses.pop();
        }
    }

    return parentheses.empty();  // All opening parentheses have a corresponding closing parenthesis.
}

// Function to check if an expression has a leading zero.
bool hasLeadingZero(const string& expression) {
    if (expression.empty()) {
        return false;  // Empty expression, so there is no leading zero.
    }

    if (expression[0] == '0' && isdigit(expression[1])) {
        return true;  // Expression starts with a leading zero followed by a digit.
    }

    for (int i = 1; i < expression.length(); i++) {
        if (expression[i] == '(' && expression[i - 1] == '0') {
            return true;  // Parenthesis after a leading zero.
        }
    }

    return false;
}

// Function to evaluate an expression and return the result as a string.
string evaluateExpression(const string& expression) {
    if (!isValidExpression(expression) || hasLeadingZero(expression)) {
        return "invalid";
    }

    return evaluate(expression);
}

int main() {
    int N;
    cin >> N;
    cin.ignore();  // Ignore the newline character after reading N.

    for (int i = 0; i < N; i++) {
        string expression;
        getline(cin, expression);
        cout << evaluateExpression(expression) << endl;
    }

    return 0;
}
