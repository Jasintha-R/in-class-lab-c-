#include <bits/stdc++.h>
using namespace std;

string ltrim(const string &);
string rtrim(const string &);

vector<string> weightedUniformStrings(string s, vector<int> queries) {
    vector<string> result;
    unordered_set<int> weights;
    
    // Calculate weights of uniform substrings
    int i = 0;
    while (i < s.length()) {
        int weight = s[i] - 'a' + 1;
        weights.insert(weight);
        
        int j = i + 1;
        while (j < s.length() && s[j] == s[i]) {
            weight += s[j] - 'a' + 1;
            weights.insert(weight);
            j++;
        }
        
        i = j;
    }
    
    // Check if queries exist in the set of weights
    for (int q : queries) {
        if (weights.count(q) > 0) {
            result.push_back("Yes");
        } else {
            result.push_back("No");
        }
    }
    
    return result;
}

int main() {
    ofstream fout(getenv("OUTPUT_PATH"));

    string s;
    getline(cin, s);

    string queries_count_temp;
    getline(cin, queries_count_temp);

    int queries_count = stoi(ltrim(rtrim(queries_count_temp)));

    vector<int> queries(queries_count);

    for (int i = 0; i < queries_count; i++) {
        string queries_item_temp;
        getline(cin, queries_item_temp);

        int queries_item = stoi(ltrim(rtrim(queries_item_temp)));

        queries[i] = queries_item;
    }

    vector<string> result = weightedUniformStrings(s, queries);

    for (size_t i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
